name: Lint

on:
    push:
    pull_request:

jobs:
    php-cs-fixer:
        strategy:
            fail-fast: true
            matrix:
                php-versions: [ '7.4' ]
                os: [ ubuntu-latest ]
        runs-on: ${{ matrix.os }}
        name: Coding Standards

        steps:
            -   name: Checkout
                uses: actions/checkout@v2

            -   name: Setup PHP
                uses: shivammathur/setup-php@v2
                with:
                    coverage: none
                    php-version: ${{ matrix.php-versions }} # PHP CS Fixer isn't compatible with PHP 8 yet https://github.com/FriendsOfPHP/PHP-CS-Fixer/issues/4702
                    tools: composer:v2

            -   name: Install dependencies
                run: composer install --no-interaction --prefer-dist --no-progress --no-scripts

            -   name: Install PHPUnit dependencies
                run: vendor/bin/simple-phpunit install

            -   name: PHP Coding Standards Fixer
                run: vendor/bin/php-cs-fixer fix --allow-risky=yes

    phpstan:
        strategy:
            fail-fast: true
            matrix:
                php-versions: [ '7.4', ]
                os: [ ubuntu-latest ]

        runs-on: ${{ matrix.os }}
        name: Static Analysis
        steps:
            -   name: Checkout
                uses: actions/checkout@v2

            -   name: Setup PHP
                uses: shivammathur/setup-php@v2
                with:
                    coverage: none
                    php-version: ${{ matrix.php-versions }}
                    tools: composer:v2

            -   name: Get composer cache directory
                id: composercache
                run: echo "::set-output name=dir::$(composer config cache-files-dir)"

            -   name: Cache dependencies
                uses: actions/cache@v2
                with:
                    path: ${{ steps.composercache.outputs.dir }}
                    key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
                    restore-keys: ${{ runner.os }}-composer-

            -   name: Install dependencies
                run: composer install --no-interaction --prefer-dist --no-progress --no-scripts

            -   name: Install PHPUnit dependencies
                run: vendor/bin/simple-phpunit install

            -   name: PHPStan
                run: vendor/bin/phpstan analyze -c phpstan.neon --no-progress

    linters:
        name: Linters
        strategy:
            fail-fast: true
            matrix:
                php-versions: [ '7.4' ]
                os: [ ubuntu-latest ]
        runs-on: ${{ matrix.os }}

        steps:
            -   name: Checkout
                uses: actions/checkout@v2

            -   name: Setup PHP
                uses: shivammathur/setup-php@v2
                with:
                    coverage: none
                    php-version: ${{ matrix.php-versions }}
                    tools: composer:v2

            -   name: Get composer cache directory
                id: composercache
                run: echo "::set-output name=dir::$(composer config cache-files-dir)"

            -   name: Cache dependencies
                uses: actions/cache@v2
                with:
                    path: ${{ steps.composercache.outputs.dir }}
                    key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
                    restore-keys: ${{ runner.os }}-composer-

            -   name: Install dependencies
                id: install
                run: composer install --no-interaction --prefer-dist --no-progress --no-scripts

            -   name: Lint YAML files
                if: always() && steps.install.outcome == 'success'
                run: ./bin/console lint:yaml config --parse-tags

            -   name: Lint TWIG files
                if: always() && steps.install.outcome == 'success'
                run: ./bin/console lint:twig templates --env=prod

            -   name: Lint Parameters and Services
                if: always() && steps.install.outcome == 'success'
                run: ./bin/console lint:container

            -   name: Lint Doctrine entities
                if: always() && steps.install.outcome == 'success'
                run: ./bin/console doctrine:schema:validate --skip-sync -vvv --no-interaction

            -   name: Lint Composer config
                if: always() && steps.install.outcome == 'success'
                run: composer validate --strict

            -   name: Download Symfony CLI
                if: always() && steps.install.outcome == 'success'
                run: wget https://get.symfony.com/cli/installer -O - | bash

            -   name: Check if any dependencies are compromised
                if: always() && steps.install.outcome == 'success'
                run: /home/runner/.symfony/bin/symfony check:security
